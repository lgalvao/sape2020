{"remainingRequest":"D:\\sape2020\\node_modules\\thread-loader\\dist\\cjs.js!D:\\sape2020\\node_modules\\babel-loader\\lib\\index.js!D:\\sape2020\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\sape2020\\src\\store\\getters.js","dependencies":[{"path":"D:\\sape2020\\src\\store\\getters.js","mtime":1540752462845},{"path":"D:\\sape2020\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\sape2020\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\sape2020\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\sape2020\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es7.object.values\";\nimport * as tipos from \"../store/mutationtypes\";\n\nvar moment = require('moment');\n\nmoment.locale('pt-BR');\nexport default {\n  getAndamentos: function getAndamentos(state) {\n    switch (state.visao) {\n      case tipos.VISAO_RAIZ:\n      case tipos.VISAO_ZONAS:\n      case tipos.VISAO_ZONASPOLO:\n      case tipos.VISAO_ZONASFILA:\n      case tipos.VISAO_FILA:\n      case tipos.VISAO_CONFERENCIA:\n        return state.andamentosZonas;\n\n      case tipos.VISAO_POLOS:\n        return state.andamentosPolos;\n\n      case tipos.VISAO_MUNICIPIOS:\n        return state.andamentosMunicipios;\n\n      default:\n        {\n          console.log(\"ERRO nos andamentos. Visao: \" + state.visao);\n          return state.andamentosZonas;\n        }\n    }\n  },\n  getCorZona: function getCorZona(state) {\n    return function (numZona) {\n      if (!state.andamentosZonas) return 'lightgray';\n      var zona = state.zonas[numZona];\n      if (zona.naoVerificar) return '#eeeeee';\n\n      if (state.andamentosZonas[zona.andamento - 1]) {\n        var cor = state.andamentosZonas[zona.andamento - 1].cor;\n\n        if (cor === '#A56A24') {\n          return '#d66303';\n        }\n\n        return cor;\n      } else return 'lightgray';\n    };\n  },\n  getZonasArray: function getZonasArray(state) {\n    return Object.values(state.zonas);\n  },\n  getCorPolo: function getCorPolo(state) {\n    return function (numPolo) {\n      if (!state.andamentosPolos) return 'lightgray';\n      var andamento = state.polos[numPolo].andamento;\n      return state.andamentosPolos[andamento - 1].cor || 'lightgray';\n    };\n  },\n  getCorMunicipio: function getCorMunicipio(state) {\n    return function (codIbge) {\n      if (!state.andamentosMunicipios) return 'lightgray';\n      var andamento = state.municipios[codIbge].andamento;\n      return state.andamentosMunicipios[andamento - 1].cor || 'lightgray';\n    };\n  },\n  getDescAndamento: function getDescAndamento(state, getters) {\n    return function (andamento) {\n      var andamentos = getters.getAndamentos;\n\n      if (andamentos[andamento - 1]) {\n        return andamentos[andamento - 1].descricao || '';\n      } else return '';\n    };\n  },\n  getModalExibido: function getModalExibido(state) {\n    return state.mostrarModalZona || state.mostrarModalMunicipio || state.mostrarModalPolo;\n  },\n  getAndamentosPendenciasPolos: function getAndamentosPendenciasPolos(state) {\n    var retorno = [];\n\n    for (var polo in state.polos) {\n      retorno[polo] = state.etapa + state.polos[polo].andamento * 10 + state.polos[polo].pendencias.length * 100;\n    }\n\n    return JSON.stringify(retorno);\n  },\n  getAndamentosEtapaMunicipios: function getAndamentosEtapaMunicipios(state) {\n    var retorno = [];\n\n    for (var municipio in state.municipios) {\n      retorno[municipio] = state.etapa + state.municipios[municipio].andamento * 10;\n    }\n\n    return JSON.stringify(retorno);\n  },\n  getUltimaAtualizacao: function getUltimaAtualizacao(state) {\n    return moment(state.dataUltimaAtualizacao, \"DD/MM/YYYY HH:mm:ss\");\n  }\n};",{"version":3,"sources":["D:/sape2020/src/store/getters.js"],"names":["tipos","moment","require","locale","getAndamentos","state","visao","VISAO_RAIZ","VISAO_ZONAS","VISAO_ZONASPOLO","VISAO_ZONASFILA","VISAO_FILA","VISAO_CONFERENCIA","andamentosZonas","VISAO_POLOS","andamentosPolos","VISAO_MUNICIPIOS","andamentosMunicipios","console","log","getCorZona","numZona","zona","zonas","naoVerificar","andamento","cor","getZonasArray","Object","values","getCorPolo","numPolo","polos","getCorMunicipio","codIbge","municipios","getDescAndamento","getters","andamentos","descricao","getModalExibido","mostrarModalZona","mostrarModalMunicipio","mostrarModalPolo","getAndamentosPendenciasPolos","retorno","polo","etapa","pendencias","length","JSON","stringify","getAndamentosEtapaMunicipios","municipio","getUltimaAtualizacao","dataUltimaAtualizacao"],"mappings":"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","sourcesContent":["import * as tipos from \"../store/mutationtypes\"\r\n\r\nconst moment = require('moment');\r\nmoment.locale('pt-BR');\r\n\r\nexport default {\r\n    getAndamentos: state => {\r\n        switch (state.visao) {\r\n            case tipos.VISAO_RAIZ:\r\n            case tipos.VISAO_ZONAS:\r\n            case tipos.VISAO_ZONASPOLO:\r\n            case tipos.VISAO_ZONASFILA:\r\n            case tipos.VISAO_FILA:\r\n            case tipos.VISAO_CONFERENCIA:\r\n                return state.andamentosZonas;\r\n\r\n            case tipos.VISAO_POLOS:\r\n                return state.andamentosPolos;\r\n            case tipos.VISAO_MUNICIPIOS:\r\n                return state.andamentosMunicipios;\r\n            default: {\r\n                console.log(\"ERRO nos andamentos. Visao: \" + state.visao);\r\n                return state.andamentosZonas\r\n            }\r\n        }\r\n    },\r\n    getCorZona: (state) => (numZona) => {\r\n        if (!state.andamentosZonas) return 'lightgray';\r\n        const zona = state.zonas[numZona];\r\n        if (zona.naoVerificar) return '#eeeeee';\r\n\r\n        if (state.andamentosZonas[zona.andamento - 1]) {\r\n            const cor = state.andamentosZonas[zona.andamento - 1].cor\r\n            if (cor === '#A56A24') {\r\n                return '#d66303'\r\n            }\r\n            return cor\r\n        }\r\n        else return 'lightgray'\r\n    },\r\n    getZonasArray: (state) => {\r\n        return Object.values(state.zonas)\r\n    },\r\n    getCorPolo: (state) => (numPolo) => {\r\n        if (!state.andamentosPolos) return 'lightgray';\r\n\r\n        const andamento = state.polos[numPolo].andamento;\r\n        return state.andamentosPolos[andamento - 1].cor || 'lightgray';\r\n    },\r\n    getCorMunicipio: (state) => (codIbge) => {\r\n        if (!state.andamentosMunicipios) return 'lightgray';\r\n        const andamento = state.municipios[codIbge].andamento;\r\n        return state.andamentosMunicipios[andamento - 1].cor || 'lightgray';\r\n    },\r\n    getDescAndamento: (state, getters) => (andamento) => {\r\n        const andamentos = getters.getAndamentos;\r\n        if (andamentos[andamento - 1]) {\r\n            return andamentos[andamento - 1].descricao || ''\r\n        }\r\n        else return ''\r\n    },\r\n    getModalExibido: (state) => {\r\n        return (state.mostrarModalZona || state.mostrarModalMunicipio || state.mostrarModalPolo)\r\n    },\r\n    getAndamentosPendenciasPolos: (state) => {\r\n        let retorno = []\r\n        for (let polo in state.polos) {\r\n            retorno[polo] = state.etapa + (state.polos[polo].andamento) * 10 + (state.polos[polo].pendencias.length) * 100\r\n        }\r\n        return JSON.stringify(retorno)\r\n    },\r\n    getAndamentosEtapaMunicipios: (state) => {\r\n        let retorno = []\r\n        for (let municipio in state.municipios) {\r\n            retorno[municipio] = state.etapa + (state.municipios[municipio].andamento) * 10\r\n        }\r\n        return JSON.stringify(retorno)\r\n    },\r\n    getUltimaAtualizacao: (state) => {\r\n        return moment(state.dataUltimaAtualizacao, \"DD/MM/YYYY HH:mm:ss\")\r\n    }\r\n}"]}]}