{"remainingRequest":"D:\\sape2020\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\sape2020\\src\\views\\VisaoConferencia.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\sape2020\\src\\views\\VisaoConferencia.vue","mtime":1540663696772},{"path":"D:\\sape2020\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\sape2020\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\sape2020\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport * as tipos from \"../store/mutationtypes\"\nimport {mapActions, mapGetters, mapMutations, mapState} from 'vuex'\n\nimport Navegacao from '../componentes/Navegacao'\nimport Legenda from '../componentes/Legenda'\n\nimport VisaoZonasItem from '../componentes/VisaoZonasItem'\nimport VisaoZonasModal from '../componentes/VisaoZonasModal'\n\nimport lodash from 'lodash'\n\nconst moment = require('moment');\nmoment.locale('pt-BR');\n\nexport default {\n    name: \"VisaoConferencia\",\n    components: {\n        Navegacao,\n        VisaoZonasItem,\n        VisaoZonasModal,\n        Legenda\n    },\n    data() {\n        return {\n            filtroConferente: '',\n            esconderConcluidas: false,\n            zonaSelecionada: '1',\n            alturaMinima: '200px'\n        }\n    },\n    updated() {\n        let alturaTabela, alturaLista, alturaLegenda\n        if (this.$refs.tabela && this.$refs.zonas) {\n            alturaTabela = this.$refs.tabela.clientHeight;\n            alturaLista = this.$refs.zonas.clientHeight;\n            alturaLegenda = this.$refs.legenda.clientHeight\n        }\n        if (alturaTabela || alturaLista || alturaLegenda)\n            this.alturaMinima = Math.max(alturaTabela, alturaLista) + 'px';\n    },\n    beforeRouteEnter(to, from, next) {\n        next(vm => {\n            vm.atualizarVisao(to.name)\n            vm.atualizarPoloSelecionado(0)\n            vm.atualizarPolling()\n        })\n    },\n    computed: {\n        ...mapState({\n            etapa: state => state.etapa,\n            zonas: state => state.zonas,\n            polos: state => state.polos,\n            fila: state => state.fila\n        }),\n        ...mapGetters({\n            andamentos: 'getAndamentos',\n        }),\n        campos() {\n            const saida = {\n                zona: {\n                    label: 'Zona',\n                    formatter: (value) => {\n                        return this.numZonaFormatado(value)\n                    }\n                },\n                polo: {},\n                dtAptaConferencia: {\n                    label: 'Apta Conf.',\n                    formatter: (value) => {\n                        if (value) return value.replace('/2018', '')\n                        else return ''\n                    }\n                },\n                tempoEspera: {\n                    label: 'Espera',\n                    formatter: (value) => {\n                        return this.duracao(value)\n                    }\n                },\n                conferente: {label: 'Conferente'},\n                dtConferenciaIniciada: {\n                    label: 'Conf. inÃ­cio', formatter: (value) => {\n                        if (value) return value.replace('/2018', '')\n                        else return ''\n                    }\n                },\n                dtConferenciaFinalizada: {\n                    label: 'Conf. final', formatter: (value) => {\n                        if (value) return value.replace('/2018', '')\n                        else return ''\n                    }\n                },\n                tempoConferencia: {\n                    label: 'Tmp conf',\n                    formatter: (value) => {\n                        return this.duracao(value)\n                    }\n                },\n                ata: {\n                    label: 'Ata'\n                }\n\n            }\n            if (this.etapa == 2) {\n                delete saida.dtAptaConferencia\n                delete saida.tempoEspera\n            }\n            return saida\n        },\n        filtrados() {\n            let retorno = []\n            const fila = this.fila\n            if (!this.filtroConferente && !this.esconderConcluidas) {\n                retorno = fila\n            }\n            if (this.filtroConferente) {\n                if (this.esconderConcluidas) {\n                    retorno = fila.filter(\n                        item => !item.conferente ||\n                            (!item.dtConferenciaFinalizada &&\n                                (item.conferente && item.conferente.indexOf(this.filtroConferente) > -1)\n                            )\n                    )\n                }\n                else {\n                    retorno = fila.filter(item => !item.conferente ||\n                        (item.conferente && item.conferente.indexOf(this.filtroConferente) > -1))\n                }\n            }\n            else if (!this.filtroConferente) {\n                if (this.esconderConcluidas) {\n                    retorno = fila.filter(item => !item.conferente || (!item.dtConferenciaFinalizada))\n                }\n                else {\n                    retorno = fila\n                }\n            }\n            return retorno\n        },\n        iniciadas() {\n            return this.zonasOrdenado.filter(z => z.andamento > 1).length\n        },\n        mediaConferencia() {\n            if (this.fila.length == 0) return 0\n            else return this.duracao(Math.floor(lodash.meanBy(this.fila, itemFila => itemFila.tempoConferencia)))\n        },\n        mediaEspera() {\n            if (this.fila.length == 0) return 0\n            else return this.duracao(Math.floor(lodash.meanBy(this.fila, itemFila => itemFila.tempoEspera)))\n        },\n        zonasOrdenado() {\n            let saida = []\n\n            for (let i = 0; i < this.fila.length; i++) {\n                const numZona = this.fila[i].zona\n                saida[i] = this.zonasArray.find(z => (z.numero === numZona))\n            }\n            for (let i = 0; i < this.zonasArray.length; i++) {\n                if (!saida.find(z => z.numero === this.zonasArray[i].numero)) {\n                    saida.push(this.zonasArray[i])\n                }\n            }\n            return lodash.orderBy(saida.filter(z => this.mostrarZona(z.numero)),\n                ['situacaoVerificacao', 'andamento', 'pendencias.length', 'percRealizado', 'numero'], ['asc', 'asc', 'desc', 'asc', 'asc'])\n        },\n        zonasArray() {\n            return Object.values(this.zonas)\n        },\n        percentualLiberadas() {\n            if (this.zonasOrdenado.length == 0) return \"\"\n            return \"(\" + (this.liberadas / this.zonasOrdenado.length * 100).toFixed() + \"%)\"\n        },\n        titulo() {\n            return this.zonaSelecionada + \" - \" +\n                this.zonas[this.zonaSelecionada].municipioSede;\n        },\n        liberadas() {\n            let liberadas = 0;\n            const andamentoMaximo = this.andamentos[this.andamentos.length - 1].numero\n            for (let zona of this.zonasOrdenado) {\n                if (zona.andamento === andamentoMaximo) {\n                    liberadas++\n                }\n            }\n            return liberadas\n        },\n        itensRestantes() {\n            let itensRestantes = 0;\n            for (let zona in this.zonas) {\n                itensRestantes += this.zonas[zona].itensRestantes\n            }\n            return itensRestantes\n        },\n        itensTotais() {\n            let itensTotais = 0;\n            for (let zona in this.zonas) {\n                itensTotais += this.zonas[zona].itensTotais\n            }\n            return itensTotais\n        },\n    },\n    methods: {\n        ...mapActions([\n            'atualizarPolling'\n        ]),\n        ...mapMutations({\n            atualizarVisao: tipos.ATUALIZAR_VISAO,\n            atualizarPoloSelecionado: tipos.ATUALIZAR_POLO_SELECIONADO,\n            mostrarModal: tipos.MOSTRAR_MODAL_ZONA\n        }),\n        mostrarDetalhes(numZona) {\n            this.mostrarModal(true);\n            this.zonaSelecionada = numZona\n        },\n        mostrarZona(numZona) {\n            return (this.zonas[numZona].andamento >= 3)\n        },\n        infoAta(numZona) {\n            if (this.tempoDecorrido(this.zonas[numZona].dataGeracaoAta)) {\n                if (this.zonas[numZona].situacaoAta.includes('desatualizada'))\n                    return this.zonas[numZona].situacaoAta\n                else\n                    return this.zonas[numZona].situacaoAta + \" \"\n                        + this.tempoDecorrido(this.zonas[numZona].dataGeracaoAta)\n            }\n            else\n                return this.zonas[numZona].situacaoAta\n        },\n        tempoDecorrido(data) {\n            if (!data) return ''\n            return moment(data, \"DD/MM/YYYY HH:mm:ss\").fromNow();\n        },\n        duracao(valor) {\n            if (valor === undefined) return ''\n            if (valor === 0) return ''\n\n            let horas = Math.floor(valor / 3600)\n            let minutos = Math.floor(valor / 60) - horas * 60\n            let segundos = valor % 60\n\n            let retorno = ''\n            if (minutos == 0) {\n                retorno = '00:' + (segundos < 10 ? '0' + segundos : segundos)\n            }\n            else if (horas == 0)\n                retorno = (minutos < 10 ? '0' + minutos : minutos) + ':'\n                    + (segundos < 10 ? '0' + segundos : segundos)\n            else\n                retorno = (horas < 10 ? '0' + horas : horas) + ':'\n                    + (minutos < 10 ? '0' + minutos : minutos) + ':'\n                    + (segundos < 10 ? '0' + segundos : segundos)\n\n            return retorno\n        },\n        numZonaFormatado(numZona) {\n            const s = \"000\" + numZona;\n            return s.substr(s.length - 3);\n        },\n        numPoloFormatado(numPolo) {\n            const s = \"00\" + numPolo;\n            return s.substr(s.length - 2);\n        }\n    }\n}\n",{"version":3,"sources":["VisaoConferencia.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAufile":"VisaoConferencia.vue","sourceRoot":"src/views","sourcesContent":["<template>\r\n  <b-container fluid>\r\n    <b-row align-v=\"start\">\r\n      <navegacao/>\r\n    </b-row>\r\n\r\n    <b-row align-v=\"start\" :style=\"{height: alturaMinima}\">\r\n      <b-col cols=\"6\">\r\n        <b-row style=\"font-size:calc(8px + 0.5vmax); background: rgb(45, 139, 0); height:50px\">\r\n          <b-col class=\"mt-2 mb-2 ml-2\">\r\n            <b-form-input size=\"sm\" placeholder=\"Conferente\"\r\n                          v-model=\"filtroConferente\"></b-form-input>\r\n          </b-col>\r\n          <b-col class=\"m-2\">\r\n            <b-form-checkbox size=\"sm\" v-model=\"esconderConcluidas\"\r\n                             style=\"color:white\">Esconder concluÃ­das\r\n            </b-form-checkbox>\r\n          </b-col>\r\n        </b-row>\r\n\r\n        <b-row align-v=\"start\" ref=\"tabela\">\r\n          <b-table id=\"tabela-conferencia\" class=\"ml-3\"\r\n                   show-empty striped hover small bordered\r\n                   empty-text=\"NÃ£o hÃ¡ dados atendendo aos filtros\"\r\n                   empty-filtered-text=\"NÃ£o hÃ¡ dados atendendo aos filtros\"\r\n                   :items=\"filtrados\"\r\n                   :fields=\"campos\"\r\n                   stacked=\"sm\">\r\n\r\n            <template slot=\"ata\" slot-scope=\"data\">\r\n              {{ infoAta(data.item.zona).replace('Ata', '') }}\r\n            </template>\r\n\r\n            <template slot=\"polo\" slot-scope=\"data\">\r\n              <div style=\"text-align: center\">{{ numPoloFormatado(zonas[data.item.zona].numPolo)}}</div>\r\n            </template>\r\n\r\n          </b-table>\r\n        </b-row>\r\n      </b-col>\r\n\r\n      <b-col cols=\"6\">\r\n        <b-row align-v=\"center\" id=\"faixa-informacoes\">\r\n          {{iniciadas}} iniciada{{iniciadas > 1 ? 's' : ''}} â¢\r\n          {{liberadas}}/122 liberada{{liberadas > 1 ? 's' : ''}} ({{Math.floor(liberadas/122*100)}}%)\r\n          <!--{{this.percentualLiberadas}} â¢ MÃ©dia conf. etapa: {{this.mediaConferencia}}-->\r\n          <!--{{this.etapa !== 2 ? 'â¢ MÃ©dia espera etapa: ' + this.mediaEspera : ''}}-->\r\n        </b-row>\r\n\r\n        <b-row id=\"lista-zonas\" ref=\"zonas\">\r\n          <visao-zonas-item\r\n              v-for=\"zona in zonasOrdenado\"\r\n              :key=\"zona.numero\"\r\n              :zona=\"zona\"\r\n              @zona-clicada=\"mostrarDetalhes(zona.numero)\"/>\r\n        </b-row>\r\n      </b-col>\r\n    </b-row>\r\n\r\n    <b-row id=\"legenda\" align-v=\"end\" ref=\"legenda\">\r\n      <legenda esconderCopyright=\"true\"/>\r\n    </b-row>\r\n\r\n    <visao-zonas-modal\r\n        :zona=\"this.zonas[this.zonaSelecionada]\">\r\n    </visao-zonas-modal>\r\n\r\n  </b-container>\r\n</template>\r\n\r\n<script>\r\n    import * as tipos from \"../store/mutationtypes\"\r\n    import {mapActions, mapGetters, mapMutations, mapState} from 'vuex'\r\n\r\n    import Navegacao from '../componentes/Navegacao'\r\n    import Legenda from '../componentes/Legenda'\r\n\r\n    import VisaoZonasItem from '../componentes/VisaoZonasItem'\r\n    import VisaoZonasModal from '../componentes/VisaoZonasModal'\r\n\r\n    import lodash from 'lodash'\r\n\r\n    const moment = require('moment');\r\n    moment.locale('pt-BR');\r\n\r\n    export default {\r\n        name: \"VisaoConferencia\",\r\n        components: {\r\n            Navegacao,\r\n            VisaoZonasItem,\r\n            VisaoZonasModal,\r\n            Legenda\r\n        },\r\n        data() {\r\n            return {\r\n                filtroConferente: '',\r\n                esconderConcluidas: false,\r\n                zonaSelecionada: '1',\r\n                alturaMinima: '200px'\r\n            }\r\n        },\r\n        updated() {\r\n            let alturaTabela, alturaLista, alturaLegenda\r\n            if (this.$refs.tabela && this.$refs.zonas) {\r\n                alturaTabela = this.$refs.tabela.clientHeight;\r\n                alturaLista = this.$refs.zonas.clientHeight;\r\n                alturaLegenda = this.$refs.legenda.clientHeight\r\n            }\r\n            if (alturaTabela || alturaLista || alturaLegenda)\r\n                this.alturaMinima = Math.max(alturaTabela, alturaLista) + 'px';\r\n        },\r\n        beforeRouteEnter(to, from, next) {\r\n            next(vm => {\r\n                vm.atualizarVisao(to.name)\r\n                vm.atualizarPoloSelecionado(0)\r\n                vm.atualizarPolling()\r\n            })\r\n        },\r\n        computed: {\r\n            ...mapState({\r\n                etapa: state => state.etapa,\r\n                zonas: state => state.zonas,\r\n                polos: state => state.polos,\r\n                fila: state => state.fila\r\n            }),\r\n            ...mapGetters({\r\n                andamentos: 'getAndamentos',\r\n            }),\r\n            campos() {\r\n                const saida = {\r\n                    zona: {\r\n                        label: 'Zona',\r\n                        formatter: (value) => {\r\n                            return this.numZonaFormatado(value)\r\n                        }\r\n                    },\r\n                    polo: {},\r\n                    dtAptaConferencia: {\r\n                        label: 'Apta Conf.',\r\n                        formatter: (value) => {\r\n                            if (value) return value.replace('/2018', '')\r\n                            else return ''\r\n                        }\r\n                    },\r\n                    tempoEspera: {\r\n                        label: 'Espera',\r\n                        formatter: (value) => {\r\n                            return this.duracao(value)\r\n                        }\r\n                    },\r\n                    conferente: {label: 'Conferente'},\r\n                    dtConferenciaIniciada: {\r\n                        label: 'Conf. inÃ­cio', formatter: (value) => {\r\n                            if (value) return value.replace('/2018', '')\r\n                            else return ''\r\n                        }\r\n                    },\r\n                    dtConferenciaFinalizada: {\r\n                        label: 'Conf. final', formatter: (value) => {\r\n                            if (value) return value.replace('/2018', '')\r\n                            else return ''\r\n                        }\r\n                    },\r\n                    tempoConferencia: {\r\n                        label: 'Tmp conf',\r\n                        formatter: (value) => {\r\n                            return this.duracao(value)\r\n                        }\r\n                    },\r\n                    ata: {\r\n                        label: 'Ata'\r\n                    }\r\n\r\n                }\r\n                if (this.etapa == 2) {\r\n                    delete saida.dtAptaConferencia\r\n                    delete saida.tempoEspera\r\n                }\r\n                return saida\r\n            },\r\n            filtrados() {\r\n                let retorno = []\r\n                const fila = this.fila\r\n                if (!this.filtroConferente && !this.esconderConcluidas) {\r\n                    retorno = fila\r\n                }\r\n                if (this.filtroConferente) {\r\n                    if (this.esconderConcluidas) {\r\n                        retorno = fila.filter(\r\n                            item => !item.conferente ||\r\n                                (!item.dtConferenciaFinalizada &&\r\n                                    (item.conferente && item.conferente.indexOf(this.filtroConferente) > -1)\r\n                                )\r\n                        )\r\n                    }\r\n                    else {\r\n                        retorno = fila.filter(item => !item.conferente ||\r\n                            (item.conferente && item.conferente.indexOf(this.filtroConferente) > -1))\r\n                    }\r\n                }\r\n                else if (!this.filtroConferente) {\r\n                    if (this.esconderConcluidas) {\r\n                        retorno = fila.filter(item => !item.conferente || (!item.dtConferenciaFinalizada))\r\n                    }\r\n                    else {\r\n                        retorno = fila\r\n                    }\r\n                }\r\n                return retorno\r\n            },\r\n            iniciadas() {\r\n                return this.zonasOrdenado.filter(z => z.andamento > 1).length\r\n            },\r\n            mediaConferencia() {\r\n                if (this.fila.length == 0) return 0\r\n                else return this.duracao(Math.floor(lodash.meanBy(this.fila, itemFila => itemFila.tempoConferencia)))\r\n            },\r\n            mediaEspera() {\r\n                if (this.fila.length == 0) return 0\r\n                else return this.duracao(Math.floor(lodash.meanBy(this.fila, itemFila => itemFila.tempoEspera)))\r\n            },\r\n            zonasOrdenado() {\r\n                let saida = []\r\n\r\n                for (let i = 0; i < this.fila.length; i++) {\r\n                    const numZona = this.fila[i].zona\r\n                    saida[i] = this.zonasArray.find(z => (z.numero === numZona))\r\n                }\r\n                for (let i = 0; i < this.zonasArray.length; i++) {\r\n                    if (!saida.find(z => z.numero === this.zonasArray[i].numero)) {\r\n                        saida.push(this.zonasArray[i])\r\n                    }\r\n                }\r\n                return lodash.orderBy(saida.filter(z => this.mostrarZona(z.numero)),\r\n                    ['situacaoVerificacao', 'andamento', 'pendencias.length', 'percRealizado', 'numero'], ['asc', 'asc', 'desc', 'asc', 'asc'])\r\n            },\r\n            zonasArray() {\r\n                return Object.values(this.zonas)\r\n            },\r\n            percentualLiberadas() {\r\n                if (this.zonasOrdenado.length == 0) return \"\"\r\n                return \"(\" + (this.liberadas / this.zonasOrdenado.length * 100).toFixed() + \"%)\"\r\n            },\r\n            titulo() {\r\n                return this.zonaSelecionada + \" - \" +\r\n                    this.zonas[this.zonaSelecionada].municipioSede;\r\n            },\r\n            liberadas() {\r\n                let liberadas = 0;\r\n                const andamentoMaximo = this.andamentos[this.andamentos.length - 1].numero\r\n                for (let zona of this.zonasOrdenado) {\r\n                    if (zona.andamento === andamentoMaximo) {\r\n                        liberadas++\r\n                    }\r\n                }\r\n                return liberadas\r\n            },\r\n            itensRestantes() {\r\n                let itensRestantes = 0;\r\n                for (let zona in this.zonas) {\r\n                    itensRestantes += this.zonas[zona].itensRestantes\r\n                }\r\n                return itensRestantes\r\n            },\r\n            itensTotais() {\r\n                let itensTotais = 0;\r\n                for (let zona in this.zonas) {\r\n                    itensTotais += this.zonas[zona].itensTotais\r\n                }\r\n                return itensTotais\r\n            },\r\n        },\r\n        methods: {\r\n            ...mapActions([\r\n                'atualizarPolling'\r\n            ]),\r\n            ...mapMutations({\r\n                atualizarVisao: tipos.ATUALIZAR_VISAO,\r\n                atualizarPoloSelecionado: tipos.ATUALIZAR_POLO_SELECIONADO,\r\n                mostrarModal: tipos.MOSTRAR_MODAL_ZONA\r\n            }),\r\n            mostrarDetalhes(numZona) {\r\n                this.mostrarModal(true);\r\n                this.zonaSelecionada = numZona\r\n            },\r\n            mostrarZona(numZona) {\r\n                return (this.zonas[numZona].andamento >= 3)\r\n            },\r\n            infoAta(numZona) {\r\n                if (this.tempoDecorrido(this.zonas[numZona].dataGeracaoAta)) {\r\n                    if (this.zonas[numZona].situacaoAta.includes('desatualizada'))\r\n                        return this.zonas[numZona].situacaoAta\r\n                    else\r\n                        return this.zonas[numZona].situacaoAta + \" \"\r\n                            + this.tempoDecorrido(this.zonas[numZona].dataGeracaoAta)\r\n                }\r\n                else\r\n                    return this.zonas[numZona].situacaoAta\r\n            },\r\n            tempoDecorrido(data) {\r\n                if (!data) return ''\r\n                return moment(data, \"DD/MM/YYYY HH:mm:ss\").fromNow();\r\n            },\r\n            duracao(valor) {\r\n                if (valor === undefined) return ''\r\n                if (valor === 0) return ''\r\n\r\n                let horas = Math.floor(valor / 3600)\r\n                let minutos = Math.floor(valor / 60) - horas * 60\r\n                let segundos = valor % 60\r\n\r\n                let retorno = ''\r\n                if (minutos == 0) {\r\n                    retorno = '00:' + (segundos < 10 ? '0' + segundos : segundos)\r\n                }\r\n                else if (horas == 0)\r\n                    retorno = (minutos < 10 ? '0' + minutos : minutos) + ':'\r\n                        + (segundos < 10 ? '0' + segundos : segundos)\r\n                else\r\n                    retorno = (horas < 10 ? '0' + horas : horas) + ':'\r\n                        + (minutos < 10 ? '0' + minutos : minutos) + ':'\r\n                        + (segundos < 10 ? '0' + segundos : segundos)\r\n\r\n                return retorno\r\n            },\r\n            numZonaFormatado(numZona) {\r\n                const s = \"000\" + numZona;\r\n                return s.substr(s.length - 3);\r\n            },\r\n            numPoloFormatado(numPolo) {\r\n                const s = \"00\" + numPolo;\r\n                return s.substr(s.length - 2);\r\n            }\r\n        }\r\n    }\r\n</script>\r\n\r\n<style scoped>\r\n  #tabela-conferencia {\r\n    font-size: calc(6px + 0.4vmax);\r\n    margin-bottom: 80px\r\n  }\r\n\r\n  #lista-zonas {\r\n    padding-top: 1vmin;\r\n    padding-left: 0.6vmax;\r\n    height: 100%\r\n  }\r\n\r\n  #faixa-informacoes {\r\n    background-color: rgb(45, 139, 0);\r\n    font-size: calc(7px + 1.1vmin);\r\n    color: white;\r\n    padding-left: 0.8vmax;\r\n    height: 50px\r\n  }\r\n\r\n</style>"]}]}