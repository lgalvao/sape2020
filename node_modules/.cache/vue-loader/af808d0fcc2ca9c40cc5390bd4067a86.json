{"remainingRequest":"D:\\sape2020\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\sape2020\\src\\views\\VisaoPolos.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\sape2020\\src\\views\\VisaoPolos.vue","mtime":1582126975993},{"path":"D:\\sape2020\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\sape2020\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\sape2020\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\sape2020\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport * as tipos from \"../store/mutationtypes\"\nimport {mapActions, mapGetters, mapMutations, mapState} from 'vuex'\n\nimport L from 'leaflet'\nimport Navegacao from '../componentes/Navegacao';\nimport Legenda from '../componentes/Legenda';\n\nimport mapa from '../assets/geo/mapapolos.js'\nimport mapanordeste from '../assets/geo/nordeste.js'\nimport VisaoPolosModal from '../componentes/VisaoPolosModal';\n\nexport default {\n    name: 'VisaoPolos',\n    components: {\n        VisaoPolosModal,\n        Legenda,\n        Navegacao\n    },\n    data() {\n        return {\n            poloSelecionado: \"1\",\n            mapa: null,\n            camadaGeo: null,\n            camadaFundo: null,\n            camadaFundo2: null,\n            info: null\n        }\n    },\n    computed: {\n        ...mapState({\n            zonas: state => state.zonas,\n            polos: state => state.polos,\n            etapa: state => state.etapa\n        }),\n        ...mapGetters({\n            andamentos: 'getAndamentos',\n            obterCor: 'getCorPolo',\n            descAndamento: 'getDescAndamento',\n            andamentosEtapaPendencias: 'getAndamentosPendenciasPolos'\n        })\n    },\n    watch: {\n        andamentosEtapaPendencias() {\n            this.atualizarMapa()\n        }\n    },\n    beforeRouteEnter(to, from, next) {\n        next(vm => {\n            vm.atualizarVisao(to.name);\n            vm.atualizarPolling();\n            vm.atualizarMapa()\n        })\n    },\n    mounted() {\n        const opcoesMapa = {\n            zoomControl: false,\n            attributionControl: false,\n            dragging: false,\n            zoomSnap: 0.1,\n            zoomDelta: 0.1,\n        };\n\n        if (this.mapa === null || this.mapa === undefined) {\n            this.mapa = L.map('mapa-polos', opcoesMapa)\n        }\n\n        if (this.camadaFundo == null) {\n            this.camadaFundo = L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token={accessToken}', {\n                id: 'mapbox.light',\n                accessToken: 'pk.eyJ1IjoibGVvbmFyZG9nYWx2YW8iLCJhIjoiY2psdjFkYmdiMHEydTNvbzY0c3RpcWVidyJ9.T-CQYKxMiHiPws79nAjETg'\n            }).addTo(this.mapa);\n        }\n\n        if (this.camadaFundo2 == null) {\n            this.camadaFundo2 = L.geoJSON(mapanordeste, {\n                style: {fillColor: 'white', color: 'white', weight: 1}\n            }).addTo(this.mapa);\n        }\n\n        if (this.camadaGeo == null) {\n            this.camadaGeo = L.geoJSON(mapa, {\n                style: this.estilo,\n                onEachFeature: this.atualizarElementos\n            }).addTo(this.mapa);\n        }\n\n        const bounds = this.camadaGeo.getBounds();\n        const zoom = this.mapa.getBoundsZoom(bounds);\n        this.mapa.setZoom(zoom);\n        this.mapa.setMinZoom(zoom);\n        this.mapa.setMaxZoom(zoom);\n        this.mapa.fitBounds(bounds);\n    },\n    methods: {\n        ...mapActions([\n            'atualizarPolling'\n        ]),\n        ...mapMutations({\n            atualizarVisao: tipos.ATUALIZAR_VISAO,\n            mostrarModal: tipos.MOSTRAR_MODAL_POLO\n        }),\n        atualizarMapa() {\n            this.camadaGeo.remove();\n\n            this.camadaGeo = L.geoJSON(mapa, {\n                style: this.estilo,\n                onEachFeature: this.atualizarElementos\n            }).addTo(this.mapa);\n\n            console.log(\"Mapa atualizado\")\n        },\n        mostrarDetalhes(e) {\n            this.poloSelecionado = e.target.feature.properties.id;\n            this.mostrarModal(true)\n        },\n        estilo(feature) {\n            return {\n                fillColor: this.obterCor(feature.properties.id),\n                weight: 3,\n                opacity: 1,\n                color: 'white',\n                fillOpacity: 1\n            }\n        },\n        destacar(e) {\n            const layer = e.target;\n            const id = layer.feature.properties.id;\n            layer.setStyle({\n                weight: 7,\n                fillOpacity: 1,\n            });\n            if (!L.Browser.ie && !L.Browser.opera && !L.Browser.edge) {\n                layer.bringToFront();\n            }\n\n            this.info = L.popup({\n                autoPan: false,\n                closeButton: false,\n                autoClose: true,\n                className: 'estilo-popup-polo'\n            }).setLatLng([-7.1, -37.8]).openOn(this.mapa);\n\n            this.atualizarInfo(id + \" - \" + this.polos[id].municipioSede)\n        },\n        cancelarDestaque(e) {\n            this.camadaGeo.resetStyle(e.target);\n            if (this.info) this.info.remove()\n        },\n        atualizarInfo(conteudo) {\n            this.info.setContent(conteudo)\n        },\n        atualizarElementos(feature, layer) {\n            layer.on({\n                mouseover: this.destacar,\n                mouseout: this.cancelarDestaque,\n                click: this.mostrarDetalhes\n            });\n            const numPolo = feature.properties.id;\n            const polo = this.polos[numPolo];\n            const numPendencias = polo.pendencias.length;\n            const indiceAndamento = polo.andamento - 1;\n\n            let ajuste = [0, 0];\n            switch (numPolo) {\n                case 1:\n                    ajuste = [-8, 4];\n                    break;\n                case 3:\n                    ajuste = [-10, 0];\n                    break;\n                case 5:\n                    ajuste = [-10, -7];\n                    break;\n                case 6:\n                    ajuste = [-35, 5];\n                    break;\n                case 15:\n                    ajuste = [-10, -8];\n                    break;\n                case 16:\n                    ajuste = [-17, -19];\n                    break;\n            }\n            if (this.andamentos[indiceAndamento].destacaPendencias && numPendencias > 0) {\n                layer.bindTooltip(numPendencias.toString(), {\n                        permanent: true,\n                        direction: 'center',\n                        opacity: 1.0,\n                        className: 'estilo-tooltip-polo',\n                        offset: ajuste\n                    }\n                );\n            } else layer.unbindTooltip()\n        }\n    }\n}\n",{"version":3,"sources":["VisaoPolos.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAmfile":"VisaoPolos.vue","sourceRoot":"src/views","sourcesContent":["<template>\r\n    <b-container fluid=\"true\">\r\n        <b-row align-v=\"start\">\r\n            <navegacao/>\r\n        </b-row>\r\n\r\n        <b-row align-v=\"center\" id=\"mapa-polos\"></b-row>\r\n\r\n        <b-row align-v=\"end\">\r\n            <legenda/>\r\n        </b-row>\r\n\r\n        <visao-polos-modal\r\n                :polo=polos[poloSelecionado]>\r\n        </visao-polos-modal>\r\n    </b-container>\r\n</template>\r\n\r\n<script>\r\n    import * as tipos from \"../store/mutationtypes\"\r\n    import {mapActions, mapGetters, mapMutations, mapState} from 'vuex'\r\n\r\n    import L from 'leaflet'\r\n    import Navegacao from '../componentes/Navegacao';\r\n    import Legenda from '../componentes/Legenda';\r\n\r\n    import mapa from '../assets/geo/mapapolos.js'\r\n    import mapanordeste from '../assets/geo/nordeste.js'\r\n    import VisaoPolosModal from '../componentes/VisaoPolosModal';\r\n\r\n    export default {\r\n        name: 'VisaoPolos',\r\n        components: {\r\n            VisaoPolosModal,\r\n            Legenda,\r\n            Navegacao\r\n        },\r\n        data() {\r\n            return {\r\n                poloSelecionado: \"1\",\r\n                mapa: null,\r\n                camadaGeo: null,\r\n                camadaFundo: null,\r\n                camadaFundo2: null,\r\n                info: null\r\n            }\r\n        },\r\n        computed: {\r\n            ...mapState({\r\n                zonas: state => state.zonas,\r\n                polos: state => state.polos,\r\n                etapa: state => state.etapa\r\n            }),\r\n            ...mapGetters({\r\n                andamentos: 'getAndamentos',\r\n                obterCor: 'getCorPolo',\r\n                descAndamento: 'getDescAndamento',\r\n                andamentosEtapaPendencias: 'getAndamentosPendenciasPolos'\r\n            })\r\n        },\r\n        watch: {\r\n            andamentosEtapaPendencias() {\r\n                this.atualizarMapa()\r\n            }\r\n        },\r\n        beforeRouteEnter(to, from, next) {\r\n            next(vm => {\r\n                vm.atualizarVisao(to.name);\r\n                vm.atualizarPolling();\r\n                vm.atualizarMapa()\r\n            })\r\n        },\r\n        mounted() {\r\n            const opcoesMapa = {\r\n                zoomControl: false,\r\n                attributionControl: false,\r\n                dragging: false,\r\n                zoomSnap: 0.1,\r\n                zoomDelta: 0.1,\r\n            };\r\n\r\n            if (this.mapa === null || this.mapa === undefined) {\r\n                this.mapa = L.map('mapa-polos', opcoesMapa)\r\n            }\r\n\r\n            if (this.camadaFundo == null) {\r\n                this.camadaFundo = L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token={accessToken}', {\r\n                    id: 'mapbox.light',\r\n                    accessToken: 'pk.eyJ1IjoibGVvbmFyZG9nYWx2YW8iLCJhIjoiY2psdjFkYmdiMHEydTNvbzY0c3RpcWVidyJ9.T-CQYKxMiHiPws79nAjETg'\r\n                }).addTo(this.mapa);\r\n            }\r\n\r\n            if (this.camadaFundo2 == null) {\r\n                this.camadaFundo2 = L.geoJSON(mapanordeste, {\r\n                    style: {fillColor: 'white', color: 'white', weight: 1}\r\n                }).addTo(this.mapa);\r\n            }\r\n\r\n            if (this.camadaGeo == null) {\r\n                this.camadaGeo = L.geoJSON(mapa, {\r\n                    style: this.estilo,\r\n                    onEachFeature: this.atualizarElementos\r\n                }).addTo(this.mapa);\r\n            }\r\n\r\n            const bounds = this.camadaGeo.getBounds();\r\n            const zoom = this.mapa.getBoundsZoom(bounds);\r\n            this.mapa.setZoom(zoom);\r\n            this.mapa.setMinZoom(zoom);\r\n            this.mapa.setMaxZoom(zoom);\r\n            this.mapa.fitBounds(bounds);\r\n        },\r\n        methods: {\r\n            ...mapActions([\r\n                'atualizarPolling'\r\n            ]),\r\n            ...mapMutations({\r\n                atualizarVisao: tipos.ATUALIZAR_VISAO,\r\n                mostrarModal: tipos.MOSTRAR_MODAL_POLO\r\n            }),\r\n            atualizarMapa() {\r\n                this.camadaGeo.remove();\r\n\r\n                this.camadaGeo = L.geoJSON(mapa, {\r\n                    style: this.estilo,\r\n                    onEachFeature: this.atualizarElementos\r\n                }).addTo(this.mapa);\r\n\r\n                console.log(\"Mapa atualizado\")\r\n            },\r\n            mostrarDetalhes(e) {\r\n                this.poloSelecionado = e.target.feature.properties.id;\r\n                this.mostrarModal(true)\r\n            },\r\n            estilo(feature) {\r\n                return {\r\n                    fillColor: this.obterCor(feature.properties.id),\r\n                    weight: 3,\r\n                    opacity: 1,\r\n                    color: 'white',\r\n                    fillOpacity: 1\r\n                }\r\n            },\r\n            destacar(e) {\r\n                const layer = e.target;\r\n                const id = layer.feature.properties.id;\r\n                layer.setStyle({\r\n                    weight: 7,\r\n                    fillOpacity: 1,\r\n                });\r\n                if (!L.Browser.ie && !L.Browser.opera && !L.Browser.edge) {\r\n                    layer.bringToFront();\r\n                }\r\n\r\n                this.info = L.popup({\r\n                    autoPan: false,\r\n                    closeButton: false,\r\n                    autoClose: true,\r\n                    className: 'estilo-popup-polo'\r\n                }).setLatLng([-7.1, -37.8]).openOn(this.mapa);\r\n\r\n                this.atualizarInfo(id + \" - \" + this.polos[id].municipioSede)\r\n            },\r\n            cancelarDestaque(e) {\r\n                this.camadaGeo.resetStyle(e.target);\r\n                if (this.info) this.info.remove()\r\n            },\r\n            atualizarInfo(conteudo) {\r\n                this.info.setContent(conteudo)\r\n            },\r\n            atualizarElementos(feature, layer) {\r\n                layer.on({\r\n                    mouseover: this.destacar,\r\n                    mouseout: this.cancelarDestaque,\r\n                    click: this.mostrarDetalhes\r\n                });\r\n                const numPolo = feature.properties.id;\r\n                const polo = this.polos[numPolo];\r\n                const numPendencias = polo.pendencias.length;\r\n                const indiceAndamento = polo.andamento - 1;\r\n\r\n                let ajuste = [0, 0];\r\n                switch (numPolo) {\r\n                    case 1:\r\n                        ajuste = [-8, 4];\r\n                        break;\r\n                    case 3:\r\n                        ajuste = [-10, 0];\r\n                        break;\r\n                    case 5:\r\n                        ajuste = [-10, -7];\r\n                        break;\r\n                    case 6:\r\n                        ajuste = [-35, 5];\r\n                        break;\r\n                    case 15:\r\n                        ajuste = [-10, -8];\r\n                        break;\r\n                    case 16:\r\n                        ajuste = [-17, -19];\r\n                        break;\r\n                }\r\n                if (this.andamentos[indiceAndamento].destacaPendencias && numPendencias > 0) {\r\n                    layer.bindTooltip(numPendencias.toString(), {\r\n                            permanent: true,\r\n                            direction: 'center',\r\n                            opacity: 1.0,\r\n                            className: 'estilo-tooltip-polo',\r\n                            offset: ajuste\r\n                        }\r\n                    );\r\n                } else layer.unbindTooltip()\r\n            }\r\n        }\r\n    }\r\n</script>\r\n\r\n<style>\r\n    #mapa-polos {\r\n        height: 88vh;\r\n        z-index: 1;\r\n    }\r\n\r\n    .estilo-tooltip-polo {\r\n        background: red !important;\r\n        color: white !important;\r\n        border: 0 !important;\r\n        font-size: 15px;\r\n        border-radius: 20px !important;\r\n        width: 30px;\r\n        height: 30px;\r\n        text-align: center;\r\n        line-height: 18px;\r\n        font-family: \"Roboto Condensed Bold\", sans-serif;\r\n    }\r\n\r\n    .estilo-popup-polo .leaflet-popup-tip {\r\n        width: 0;\r\n        height: 0;\r\n    }\r\n\r\n    .estilo-popup-polo .leaflet-popup-content-wrapper {\r\n        position: relative;\r\n        background: #343a40;\r\n        color: rgba(255, 255, 255, 0.8);\r\n        border-radius: 0;\r\n        font-family: \"Roboto condensed\", sans-serif;\r\n        font-size: 16px;\r\n        box-shadow: none;\r\n    }\r\n\r\n    .leaflet-tooltip-left.estilo-tooltip-polo::before {\r\n        border-left-color: transparent !important;\r\n    }\r\n\r\n    .leaflet-tooltip-right.estilo-tooltip::before {\r\n        border-right-color: transparent !important;\r\n    }\r\n\r\n</style>\r\n\r\n"]}]}